// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/keptn/keptn/helm-service/controller (interfaces: Handler)

// Package controller is a generated GoMock package.
package controller

import (
	gomock "github.com/golang/mock/gomock"
	keptn "github.com/keptn/go-utils/pkg/lib"
	v0_2_0 "github.com/keptn/go-utils/pkg/lib/v0_2_0"
	helm "github.com/keptn/keptn/helm-service/pkg/helm"
	chart "helm.sh/helm/v3/pkg/chart"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// existsGeneratedChart mocks base method
func (m *MockHandler) existsGeneratedChart(arg0 v0_2_0.EventData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "existsGeneratedChart", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// existsGeneratedChart indicates an expected call of existsGeneratedChart
func (mr *MockHandlerMockRecorder) existsGeneratedChart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "existsGeneratedChart", reflect.TypeOf((*MockHandler)(nil).existsGeneratedChart), arg0)
}

// getConfigServiceURL mocks base method
func (m *MockHandler) getConfigServiceURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getConfigServiceURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// getConfigServiceURL indicates an expected call of getConfigServiceURL
func (mr *MockHandlerMockRecorder) getConfigServiceURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getConfigServiceURL", reflect.TypeOf((*MockHandler)(nil).getConfigServiceURL))
}

// getGeneratedChart mocks base method
func (m *MockHandler) getGeneratedChart(arg0 v0_2_0.EventData) (*chart.Chart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getGeneratedChart", arg0)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getGeneratedChart indicates an expected call of getGeneratedChart
func (mr *MockHandlerMockRecorder) getGeneratedChart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getGeneratedChart", reflect.TypeOf((*MockHandler)(nil).getGeneratedChart), arg0)
}

// getHelmExecutor mocks base method
func (m *MockHandler) getHelmExecutor() helm.HelmExecutor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getHelmExecutor")
	ret0, _ := ret[0].(helm.HelmExecutor)
	return ret0
}

// getHelmExecutor indicates an expected call of getHelmExecutor
func (mr *MockHandlerMockRecorder) getHelmExecutor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getHelmExecutor", reflect.TypeOf((*MockHandler)(nil).getHelmExecutor))
}

// getKeptnHandler mocks base method
func (m *MockHandler) getKeptnHandler() *v0_2_0.Keptn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getKeptnHandler")
	ret0, _ := ret[0].(*v0_2_0.Keptn)
	return ret0
}

// getKeptnHandler indicates an expected call of getKeptnHandler
func (mr *MockHandlerMockRecorder) getKeptnHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getKeptnHandler", reflect.TypeOf((*MockHandler)(nil).getKeptnHandler))
}

// getUserChart mocks base method
func (m *MockHandler) getUserChart(arg0 v0_2_0.EventData) (*chart.Chart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserChart", arg0)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserChart indicates an expected call of getUserChart
func (mr *MockHandlerMockRecorder) getUserChart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserChart", reflect.TypeOf((*MockHandler)(nil).getUserChart), arg0)
}

// handleError mocks base method
func (m *MockHandler) handleError(arg0 string, arg1 error, arg2 string, arg3 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "handleError", arg0, arg1, arg2, arg3)
}

// handleError indicates an expected call of handleError
func (mr *MockHandlerMockRecorder) handleError(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleError", reflect.TypeOf((*MockHandler)(nil).handleError), arg0, arg1, arg2, arg3)
}

// sendEvent mocks base method
func (m *MockHandler) sendEvent(arg0, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendEvent indicates an expected call of sendEvent
func (mr *MockHandlerMockRecorder) sendEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendEvent", reflect.TypeOf((*MockHandler)(nil).sendEvent), arg0, arg1, arg2)
}

// upgradeChart mocks base method
func (m *MockHandler) upgradeChart(arg0 *chart.Chart, arg1 v0_2_0.EventData, arg2 keptn.DeploymentStrategy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "upgradeChart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// upgradeChart indicates an expected call of upgradeChart
func (mr *MockHandlerMockRecorder) upgradeChart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "upgradeChart", reflect.TypeOf((*MockHandler)(nil).upgradeChart), arg0, arg1, arg2)
}

// upgradeChartWithReplicas mocks base method
func (m *MockHandler) upgradeChartWithReplicas(arg0 *chart.Chart, arg1 v0_2_0.EventData, arg2 keptn.DeploymentStrategy, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "upgradeChartWithReplicas", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// upgradeChartWithReplicas indicates an expected call of upgradeChartWithReplicas
func (mr *MockHandlerMockRecorder) upgradeChartWithReplicas(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "upgradeChartWithReplicas", reflect.TypeOf((*MockHandler)(nil).upgradeChartWithReplicas), arg0, arg1, arg2, arg3)
}
